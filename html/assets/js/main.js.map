{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["'use strict';\nvar frameSlider = {\n\tslider: $('.js-frame-carousel'),\n\tsliderSettings: function sliderSettings() {\n\t\treturn {\n\t\t\tslidesToShow: 1,\n\t\t\tslidesToScroll: 1,\n\t\t\tinfinite: true,\n\t\t\tfocusOnSelect: false,\n\t\t\tarrows: true,\n\t\t\tdots: true,\n\t\t\tspeed: 500\n\t\t};\n\t},\n\tinit: function init() {\n\t\tvar slider = void 0;\n\t\tif (frameSlider.slider.length) {\n\t\t\tslider = frameSlider.slider.slick(frameSlider.sliderSettings());\n\t\t}\n\t}\n};\nvar productZoomCarousel = {\n\tslider: $('.js-product-zoom'),\n\tsliderSettings: function sliderSettings() {\n\t\treturn {\n\t\t\tdots: true,\n\t\t\tarrows: false,\n\t\t\tinfinite: true,\n\t\t\tspeed: 500,\n\t\t\tfade: true,\n\t\t\tfocusOnSelect: false,\n\t\t\tlazyLoad: \"ondemand\",\n\t\t\tcssEase: \"linear\",\n\t\t\tadaptiveHeight: true,\n\t\t\tmobileFirst: true,\n\t\t\tcenterMode: true,\n\t\t\tresponsive: [{\n\t\t\t\tbreakpoint: 767,\n\t\t\t\tsettings: {\n\t\t\t\t\tarrows: false,\n\t\t\t\t\tdots: true,\n\t\t\t\t\tcustomPaging: function customPaging(slider, i) {\n\t\t\t\t\t\tvar item = $(slider.$slides[i]).find(\"img\");\n\t\t\t\t\t\treturn '<button class=\"product-zoom__tab\"><img class=\"img-thumbnail\" src=\"' + item.attr(\"data-thumb\") + '\" alt=\"' + item.attr(\"data-alt-thumb\") + '\"></button>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t};\n\t},\n\tinit: function init() {\n\t\tif ($('.product-zoom').length) {\n\t\t\tproductZoomCarousel.slider.slick(productZoomCarousel.sliderSettings());\n\t\t}\n\t}\n};\nvar initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n\tvar parseThumbnailElements = function parseThumbnailElements(el) {\n\t\tvar thumbElements = el.childNodes,\n\t\t\tnumNodes = thumbElements.length,\n\t\t\titems = [],\n\t\t\tfigureEl = void 0,\n\t\t\tlinkEl = void 0,\n\t\t\tsize = void 0,\n\t\t\titem = void 0;\n\t\tfor (var i = 0; i < numNodes; i++) {\n\t\t\tfigureEl = thumbElements[i]; // <figure> element\n\t\t\t// include only element nodes \n\t\t\tif (figureEl.nodeType !== 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlinkEl = figureEl.children[0]; // <a> element\n\t\t\tsize = linkEl.getAttribute('data-size').split('x'); // create slide object\n\t\t\titem = {\n\t\t\t\tsrc: linkEl.getAttribute('href'),\n\t\t\t\tw: parseInt(size[0], 10),\n\t\t\t\th: parseInt(size[1], 10),\n\t\t\t\talt: linkEl.getAttribute(\"data-alt-zoom\")\n\t\t\t};\n\t\t\tif (figureEl.children.length > 1) { // <figcaption> content\n\t\t\t\titem.title = figureEl.children[1].innerHTML;\n\t\t\t}\n\t\t\tif (linkEl.children.length > 0) { // <img> thumbnail element, retrieving thumbnail url\n\t\t\t\titem.msrc = linkEl.children[0].getAttribute('src');\n\t\t\t}\n\t\t\titem.el = figureEl; // save link to element for getThumbBoundsFn\n\t\t\titems.push(item);\n\t\t}\n\t\treturn items;\n\t}; // find nearest parent element\n\tvar closest = function closest(el, fn) {\n\t\treturn el && (fn(el) ? el : closest(el.parentNode, fn));\n\t}; // triggers when user clicks on thumbnail\n\tvar onThumbnailsClick = function onThumbnailsClick(e) {\n\t\te = e || window.event;\n\t\te.preventDefault ? e.preventDefault() : e.returnValue = false;\n\t\tvar eTarget = e.target || e.srcElement; // find root element of slide\n\t\tvar clickedListItem = closest(eTarget, function(el) {\n\t\t\treturn el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n\t\t});\n\t\tif (!clickedListItem) {\n\t\t\treturn;\n\t\t} // find index of clicked item by looping through all child nodes\n\t\t// alternatively, you may define index via data- attribute\n\t\tvar clickedGallery = clickedListItem.parentNode,\n\t\t\tchildNodes = clickedListItem.parentNode.childNodes,\n\t\t\tnumChildNodes = childNodes.length,\n\t\t\tnodeIndex = 0,\n\t\t\tindex = void 0;\n\t\tfor (var i = 0; i < numChildNodes; i++) {\n\t\t\tif (childNodes[i].nodeType !== 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (childNodes[i] === clickedListItem) {\n\t\t\t\tindex = nodeIndex;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnodeIndex++;\n\t\t}\n\t\tvar link = $(clickedListItem).find(\"a\").attr(\"href\");\n\t\tif (index >= 0 && link !== undefined) { // open PhotoSwipe if valid index found\n\t\t\topenPhotoSwipe(index, clickedGallery);\n\t\t}\n\t\treturn false;\n\t}; // parse picture index and gallery index from URL (#&pid=1&gid=2)\n\tvar photoswipeParseHash = function photoswipeParseHash() {\n\t\tvar hash = window.location.hash.substring(1),\n\t\t\tparams = {};\n\t\tif (hash.length < 5) {\n\t\t\treturn params;\n\t\t}\n\t\tvar vars = hash.split('&');\n\t\tfor (var i = 0; i < vars.length; i++) {\n\t\t\tif (!vars[i]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar pair = vars[i].split('=');\n\t\t\tif (pair.length < 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tparams[pair[0]] = pair[1];\n\t\t}\n\t\tif (params.gid) {\n\t\t\tparams.gid = parseInt(params.gid, 10);\n\t\t}\n\t\treturn params;\n\t};\n\tvar openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n\t\tvar pswpElement = document.querySelectorAll('.pswp')[0],\n\t\t\tgallery = void 0,\n\t\t\toptions = void 0,\n\t\t\titems = void 0;\n\t\titems = parseThumbnailElements(galleryElement); // define options (if needed)\n\t\toptions = { // barsSize: {\n\t\t\t//     top: 0,\n\t\t\t//     bottom: 0\n\t\t\t// },\n\t\t\tcloseEl: true,\n\t\t\tcaptionEl: false,\n\t\t\tfullscreenEl: true,\n\t\t\tshareEl: false,\n\t\t\ttapToToggleControls: false,\n\t\t\thistory: false,\n\t\t\tzoomEl: true,\n\t\t\tfocus: false,\n\t\t\tcounterEl: false,\n\t\t\tarrowEl: false, // scaleMode: \"orig\",\n\t\t\t// define gallery index (for URL)\n\t\t\tgalleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\t\t\tgetThumbBoundsFn: function getThumbBoundsFn(index) { // See Options -> getThumbBoundsFn section of documentation for more info\n\t\t\t\tvar thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail\n\t\t\t\t\tpageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n\t\t\t\t\trect = thumbnail.getBoundingClientRect();\n\t\t\t\treturn {\n\t\t\t\t\tx: rect.left,\n\t\t\t\t\ty: rect.top + pageYScroll,\n\t\t\t\t\tw: rect.width\n\t\t\t\t};\n\t\t\t}\n\t\t}; // PhotoSwipe opened from URL\n\t\tif (fromURL) {\n\t\t\tif (options.galleryPIDs) { // parse real index when custom PIDs are used \n\t\t\t\t// http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n\t\t\t\tfor (var j = 0; j < items.length; j++) {\n\t\t\t\t\tif (items[j].pid == index) {\n\t\t\t\t\t\toptions.index = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else { // in URL indexes start from 1\n\t\t\t\toptions.index = parseInt(index, 10) - 1;\n\t\t\t}\n\t\t} else {\n\t\t\toptions.index = parseInt(index, 10);\n\t\t} // exit if index not found\n\t\tif (isNaN(options.index)) {\n\t\t\treturn;\n\t\t}\n\t\tif (disableAnimation) {\n\t\t\toptions.showAnimationDuration = 0;\n\t\t} // Pass data to PhotoSwipe and initialize it\n\t\tgallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);\n\t\twindow.gallery = gallery;\n\t\tgallery.init();\n\t}; // loop through all gallery elements and bind events\n\tvar galleryElements = document.querySelectorAll(gallerySelector);\n\tfor (var i = 0, l = galleryElements.length; i < l; i++) {\n\t\tgalleryElements[i].setAttribute('data-pswp-uid', i + 1);\n\t\tgalleryElements[i].onclick = onThumbnailsClick;\n\t} // Parse URL and open gallery if it contains #&pid=3&gid=1\n\tvar hashData = photoswipeParseHash();\n\tif (hashData.pid && hashData.gid) {\n\t\topenPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n\t}\n};\n$(function() {\n\tframeSlider.init();\n\tproductZoomCarousel.init();\n\tinitPhotoSwipeFromDOM('.product-zoom');\n});\n"],"file":"main.js"}